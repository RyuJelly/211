웹 어플리케이션 서버 (WAS) : jsp실행함
웹어플의 동작순서
1. 사용자가 주소창에 웹 홈페이지 입력하여 요청
2. 서버에 요청이 들어오면 WAS가 가져올 준비
3. WAS는 요청한 페이지를 완정하기위해 로직이나 데이터 연동 및 처리
4. 작업이 끝나면 서버에게 전송
5. 페이지 등장
수업에 쓰이는 was는 톰캣

실질적으로 서블릿과  JSP는 WAS가 실행하는게 아니라
WAS가 JSP를 서블릿으로 변환해줘서 보여주는것이며
둘은 용도가 다를뿐 사실상 같은것이라 볼수 있다
처리할때는 서블릿, 화면 출력에서는 JSP가 유리하다

POST 요청
1. home 태그에 메서드에 post가 있는경우
2. ajax에서 post로 요청했을 경우

GET 요청
위 post조건 말고 나머지 싹 다

서블릿 작동 순서
1. http 상속
2. urlMapping 설정(접속하는 주소)
3. get/post =>doget()/dopost()
4. response를 이용하여 내용출력

JSP작동 순서
1. JSP 페이지를 변환해서 서블릿 소스코로 바꾼다
2. 바꾼 소스코드를 컴파일하여 결과를 통해 서블릿 객체를 생성한다
3. 만든 객체를 초기화시켜서 서블릿을 만든다

1~10, 100, 1000까지 각각의 합=>전체합을 구하는 서블릿
->jsp결과를 확인해보자



1.웹 애플리케이션
-WAS
-J2EE
-동적 컨텐츠

2. 서블릿, JSP 관계
-JSP 실행 과정
- 서블릿 개발 과정

3.form태그 서버에 데이터 전송
- 서블릿 : requst.getParameter(), Dispatcher 페이지 이동
		=> request.setAttribute(key, value)
- JSP : <% 자바코드 %> -> 스크릿트릿
         <%= 결과출력%>-> 표현식

4. JSP 지시자 : 앞으로 사용할 클래스를 사용하기 위해 미리 선언하는것
-@page : 가장 위쪽에 위치하며 자동완성할때 보통 같이 오니까 신경안써도 됨
-@inclide : 특정 내용을 포함시키고자 할때 사용
-@taglib : 기존에 있던 태그가 아닌 새로운 누군가가 만든 태그를 사용하기 위해 라이브러리를 추가할때 사용

5. JSP 내장객체 : 별도의 추가없이 자바 내에 자체적으로 내장되어있는 객체들이며 이름만 쓰면 바로 사용이 가능하다
-request(요청)
-response(응답)
-out(출력)
-page < request(요청하는 페이지까지 저장) < session(로그아웃하기 전까지) < application(서버가 유지되는 동안) (범위/다 다름)
=>setAttribute()/getAttribute() 사용가능

Dispatcher, Redirect 차이점
=> Dispatcher: A -> B(dispatcher) (요청의 연장) -> C
=> Redirect: A -> B(redirect) -> C (B에서 C는 새로운 요청 -> request가 다르다)

6. JSP 액션태그 -> 비즈니스 로직 -> 태그
7. JDBC -> DB연동
8. EL/JSTL => 태그화
9. MVC : 모델2 (??)